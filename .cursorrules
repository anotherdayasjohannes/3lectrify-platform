# 3LECTRIFY Platform - AI Coding Rules
# Immersive Storytelling with GSAP & React

## üìö External Documentation
- GSAP: https://gsap.com/llms.txt
- Lenis: https://github.com/studio-freight/lenis
- Next.js: https://nextjs.org/docs
- React: https://react.dev

## üèóÔ∏è Project Architecture
- **Monorepo**: Turborepo + pnpm
- **Apps**: `apps/3lectrify/` (Next.js 15), `apps/studio/` (Sanity Studio)
- **Packages**: `packages/ui/`, `packages/animations/`, `packages/sanity/`
- **Tech Stack**:
  - Next.js 15.5 (App Router, React 19)
  - TypeScript 5.7 (strict mode)
  - GSAP 3.13 + ScrollTrigger
  - Lenis 1.3 (smooth scroll)
  - Tailwind CSS 4
  - Sanity CMS

## üé¨ Animation Philosophy
1. **Performance First**: Optimize for 60fps, use will-change sparingly
2. **Accessibility First**: Respect prefers-reduced-motion
3. **Mobile Optimized**: Reduce animation complexity on mobile
4. **Reusable**: Build composable animation primitives
5. **Clean Up**: Always clean up animations to prevent memory leaks

## ‚öõÔ∏è React + GSAP Best Practices

### ‚úÖ ALWAYS Use useGSAP Hook (NOT useEffect)
```tsx
import { useGSAP } from '@gsap/react';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

gsap.registerPlugin(ScrollTrigger);

function Component() {
  const containerRef = useRef<HTMLDivElement>(null);
  
  // ‚úÖ CORRECT: useGSAP with scope
  useGSAP(() => {
    gsap.from('[data-animate]', {
      opacity: 0,
      y: 50,
      duration: 0.8,
      stagger: 0.15,
      ease: 'power3.out',
      scrollTrigger: {
        trigger: containerRef.current,
        start: 'top 75%',
        once: true, // Prevent re-triggering
        markers: process.env.NODE_ENV === 'development'
      }
    });
  }, { scope: containerRef }); // Auto cleanup!

  return <div ref={containerRef}>...</div>;
}
```

### ‚ùå NEVER Use useEffect for GSAP
```tsx
// ‚ùå WRONG: useEffect doesn't auto-cleanup GSAP
useEffect(() => {
  gsap.to('.element', { x: 100 }); // Memory leak!
}, []);

// ‚ùå WRONG: Manual cleanup is error-prone
useEffect(() => {
  const ctx = gsap.context(() => {
    gsap.to('.element', { x: 100 });
  });
  return () => ctx.revert(); // Tedious + can miss things
}, []);
```

## üéØ ScrollTrigger Patterns

### Basic Scroll Animation
```tsx
useGSAP(() => {
  gsap.to('.hero', {
    opacity: 1,
    y: 0,
    scrollTrigger: {
      trigger: '.hero',
      start: 'top 80%', // When top of trigger hits 80% of viewport
      end: 'bottom 20%',
      once: true, // Play once, then release
      markers: process.env.NODE_ENV === 'development'
    }
  });
}, { scope: containerRef });
```

### Pinning (Scroll-Locked Sections)
```tsx
useGSAP(() => {
  gsap.to('.cards', {
    x: -500,
    ease: 'none',
    scrollTrigger: {
      trigger: '.section',
      pin: true, // Pin the section
      scrub: 1, // Smooth scrubbing (1 second lag)
      start: 'top top',
      end: '+=200%', // Pin for 2x viewport height
      anticipatePin: 1 // Smooth pin behavior
    }
  });
}, { scope: containerRef });
```

### Stagger Animations
```tsx
useGSAP(() => {
  gsap.from('.card', {
    opacity: 0,
    y: 50,
    duration: 0.8,
    stagger: 0.15, // Delay between each card
    ease: 'power3.out',
    scrollTrigger: {
      trigger: '.cards',
      start: 'top 75%',
      once: true
    }
  });
}, { scope: containerRef });
```

## ‚è±Ô∏è Timeline Patterns

### Sequential Timeline
```tsx
useGSAP(() => {
  const tl = gsap.timeline({
    scrollTrigger: {
      trigger: '.hero',
      start: 'top center',
      once: true
    }
  });

  tl.from('.title', { y: 50, opacity: 0, duration: 0.8 })
    .from('.subtitle', { y: 30, opacity: 0, duration: 0.6 }, '-=0.3') // Overlap by 0.3s
    .from('.cta', { y: 20, opacity: 0, duration: 0.5 }, '-=0.2');
}, { scope: containerRef });
```

### Parallel Animations
```tsx
useGSAP(() => {
  const tl = gsap.timeline();
  
  // All start at the same time
  tl.from('.left', { x: -100, opacity: 0 }, 0)
    .from('.center', { scale: 0, opacity: 0 }, 0)
    .from('.right', { x: 100, opacity: 0 }, 0);
}, { scope: containerRef });
```

## üåä Lenis + GSAP Integration

### Setup Lenis
```tsx
import Lenis from '@studio-freight/lenis';

// In root layout or _app.tsx
useEffect(() => {
  const lenis = new Lenis({
    duration: 1.2,
    easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
    smoothWheel: true,
    smoothTouch: false // Disable on touch devices
  });

  // Sync Lenis with GSAP ScrollTrigger
  lenis.on('scroll', ScrollTrigger.update);
  gsap.ticker.add((time) => lenis.raf(time * 1000));
  gsap.ticker.lagSmoothing(0);

  return () => {
    lenis.destroy();
    gsap.ticker.remove(lenis.raf);
  };
}, []);
```

## üé® Easing Presets

### GSAP Easings (Professional)
```tsx
// Smooth, natural
ease: 'power2.out'    // Decelerates
ease: 'power3.inOut'  // Smooth both ends
ease: 'back.out(1.7)' // Overshoot effect
ease: 'elastic.out'   // Bouncy

// Lenis-style smooth
ease: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t))

// Custom cubic-bezier
ease: 'cubic-bezier(0.4, 0, 0.2, 1)'
```

## üé≠ Visibility & Opacity Patterns

### Always Set Initial Visibility
```tsx
// ‚úÖ CORRECT: Cards visible by default (graceful degradation)
<article
  data-card
  className="..."
  style={{ opacity: 1 }} // Explicit default
>

// ‚ùå WRONG: Cards invisible if JS fails
<article data-card className="opacity-0">
```

### once: true vs Persistent Animations
```tsx
// ‚úÖ Use once: true for entrance animations
scrollTrigger: { once: true }

// ‚úÖ Use persistent for interactive effects
scrollTrigger: { toggleActions: 'play none none reverse' }
```

## ‚ôø Accessibility Rules

### Respect prefers-reduced-motion
```tsx
const shouldReduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

useGSAP(() => {
  if (shouldReduceMotion) {
    // Instant transitions, no animation
    gsap.set('.element', { opacity: 1, y: 0 });
    return;
  }

  // Animated transitions
  gsap.from('.element', { opacity: 0, y: 50, duration: 0.8 });
}, { scope: containerRef });
```

### Fallback CSS
```css
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    transition-duration: 0.01ms !important;
  }
}
```

## üöÄ Performance Optimization

### Use will-change Sparingly
```tsx
// ‚úÖ CORRECT: Only during animation
useGSAP(() => {
  gsap.to('.hero', {
    x: 100,
    duration: 1,
    onStart: () => {
      gsap.set('.hero', { willChange: 'transform' });
    },
    onComplete: () => {
      gsap.set('.hero', { willChange: 'auto' });
    }
  });
});

// ‚ùå WRONG: Permanent will-change
<div className="will-change-transform">
```

### Batch Updates
```tsx
// ‚úÖ Batch multiple animations
gsap.to(['.card1', '.card2', '.card3'], {
  opacity: 1,
  stagger: 0.1
});

// ‚ùå Multiple individual animations
gsap.to('.card1', { opacity: 1 });
gsap.to('.card2', { opacity: 1 });
gsap.to('.card3', { opacity: 1 });
```

## üîß Common Pitfalls to Avoid

1. **‚ùå Using useEffect instead of useGSAP**
2. **‚ùå Forgetting `once: true` on ScrollTrigger** (causes re-triggers)
3. **‚ùå Not providing default visibility** (opacity: 1)
4. **‚ùå Animating width/height** (use scale instead)
5. **‚ùå Too many pin-spacers** (causes layout issues)
6. **‚ùå Ignoring prefers-reduced-motion**
7. **‚ùå Animating on every scroll event** (use ScrollTrigger)
8. **‚ùå Not testing on mobile**

## üì¶ Monorepo Commands

```bash
# Run all dev servers
pnpm dev

# Run specific app
pnpm --filter 3lectrify dev
pnpm --filter studio dev

# Build specific package
pnpm --filter @3lectrify/ui build
pnpm --filter @3lectrify/animations build

# Add dependency to specific package
pnpm --filter 3lectrify add gsap
pnpm --filter @3lectrify/ui add -D @types/node

# Run from package directory
cd apps/3lectrify && pnpm dev
cd packages/ui && pnpm build
```

## üéØ Code Review Checklist

Before committing animation code:
- [ ] Used `useGSAP` (not `useEffect`)
- [ ] Added `once: true` to entrance animations
- [ ] Set explicit default visibility (`opacity: 1`)
- [ ] Tested with `prefers-reduced-motion`
- [ ] Added development markers (`markers: process.env.NODE_ENV === 'development'`)
- [ ] Scoped animations (`{ scope: containerRef }`)
- [ ] Tested on mobile (reduced complexity if needed)
- [ ] No permanent `will-change` in CSS
- [ ] No layout thrashing (batch reads/writes)
- [ ] Proper TypeScript types

## üìù Commit Message Guidelines

```bash
# Animation commits
feat(animations): add scroll-triggered card stagger
fix(animations): prevent FeatureCards re-trigger with once: true
perf(animations): optimize ScrollTrigger for mobile
refactor(animations): migrate from useEffect to useGSAP

# Component commits
feat(ui): add HeroGradient component with GSAP fade-in
fix(ui): correct opacity defaults for graceful degradation
```

## üåü Inspiration & References

**Award-Winning Sites (Study These)**:
- https://www.apple.com/ (Product reveals)
- https://www.awwwards.com/websites/gsap/ (GSAP showcase)
- https://tympanus.net/codrops/ (Creative animations)
- https://lenis.studiofreight.com/ (Smooth scroll demo)

**GSAP Resources**:
- Official Docs: https://gsap.com/docs/v3/
- ScrollTrigger: https://gsap.com/docs/v3/Plugins/ScrollTrigger/
- Ease Visualizer: https://gsap.com/docs/v3/Eases/
- CodePen Demos: https://codepen.io/GreenSock

## üéì When to Use What

| Animation Type | Tool | Example |
|---------------|------|---------|
| Entrance | `gsap.from()` | Cards sliding in |
| Exit | `gsap.to()` | Modal closing |
| Sequence | `gsap.timeline()` | Hero text reveal |
| Scroll-based | `ScrollTrigger` | Parallax effects |
| Hover | CSS `:hover` | Button states |
| Page transition | `gsap.to()` + router | Route changes |

## üèÜ Our Animation Principles

1. **Subtle > Flashy**: Enhance, don't distract
2. **Fast > Slow**: 0.3-0.8s is the sweet spot
3. **Purposeful**: Every animation tells the story
4. **Consistent**: Reuse easings and durations
5. **Accessible**: Never exclude users

---

**Remember**: Great animations are invisible. They guide attention, convey hierarchy, and make the experience feel alive without being noticed.

**Goal**: Create a website that feels like magic. ‚ú®



